"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var chalk_1 = __importDefault(require("chalk"));
var patchFs_1 = require("./patchFs");
var apply_1 = require("./patch/apply");
var fs_extra_1 = require("fs-extra");
var path_1 = require("./path");
var path_2 = require("path");
var PackageDetails_1 = require("./PackageDetails");
var reverse_1 = require("./patch/reverse");
var is_ci_1 = __importDefault(require("is-ci"));
var semver_1 = __importDefault(require("semver"));
var read_1 = require("./patch/read");
// don't want to exit(1) on postinsall locally.
// see https://github.com/ds300/patch-package/issues/86
var shouldExitPostinstallWithError = is_ci_1.default || process.env.NODE_ENV === "test";
var exit = function () { return process.exit(shouldExitPostinstallWithError ? 1 : 0); };
function findPatchFiles(patchesDirectory) {
    if (!fs_extra_1.existsSync(patchesDirectory)) {
        return [];
    }
    return patchFs_1.getPatchFiles(patchesDirectory);
}
function getInstalledPackageVersion(_a) {
    var appPath = _a.appPath, path = _a.path, pathSpecifier = _a.pathSpecifier;
    var packageDir = path_1.join(appPath, path);
    if (!fs_extra_1.existsSync(packageDir)) {
        console.error(chalk_1.default.red("Error:") + " Patch file found for package " + path_2.posix.basename(pathSpecifier) + (" which is not present at " + path_1.relative(".", packageDir)));
        exit();
    }
    var version = require(path_1.join(packageDir, "package.json")).version;
    // normalize version for `npm ci`
    var result = semver_1.default.valid(version);
    if (result === null) {
        console.error(chalk_1.default.red("Error:") + " Version string '" + version + "' cannot be parsed from " + path_1.join(packageDir, "package.json"));
        exit();
    }
    return result;
}
function applyPatchesForApp(_a) {
    var appPath = _a.appPath, reverse = _a.reverse, patchDir = _a.patchDir;
    var patchesDirectory = path_1.join(appPath, patchDir);
    var files = findPatchFiles(patchesDirectory);
    if (files.length === 0) {
        console.error(chalk_1.default.red("No patch files found"));
        return;
    }
    files.forEach(function (filename) {
        var packageDetails = PackageDetails_1.getPackageDetailsFromPatchFilename(filename);
        if (!packageDetails) {
            console.warn("Unrecognized patch file in patches directory " + filename);
            return;
        }
        var name = packageDetails.name, version = packageDetails.version, path = packageDetails.path, pathSpecifier = packageDetails.pathSpecifier;
        var installedPackageVersion = getInstalledPackageVersion({
            appPath: appPath,
            path: path,
            pathSpecifier: pathSpecifier,
        });
        if (applyPatch({
            patchFilePath: path_1.resolve(patchesDirectory, filename),
            reverse: reverse,
            packageDetails: packageDetails,
            patchDir: patchDir,
        })) {
            // yay patch was applied successfully
            // print warning if version mismatch
            if (installedPackageVersion !== version) {
                printVersionMismatchWarning({
                    packageName: name,
                    actualVersion: installedPackageVersion,
                    originalVersion: version,
                    pathSpecifier: pathSpecifier,
                    path: path,
                });
            }
            else {
                console.log(chalk_1.default.bold(pathSpecifier) + "@" + version + " " + chalk_1.default.green("âœ”"));
            }
        }
        else {
            // completely failed to apply patch
            // TODO: propagate useful error messages from patch application
            if (installedPackageVersion === version) {
                printBrokenPatchFileError({
                    packageName: name,
                    patchFileName: filename,
                    pathSpecifier: pathSpecifier,
                    path: path,
                });
            }
            else {
                printPatchApplictionFailureError({
                    packageName: name,
                    actualVersion: installedPackageVersion,
                    originalVersion: version,
                    patchFileName: filename,
                    path: path,
                    pathSpecifier: pathSpecifier,
                });
            }
            exit();
        }
    });
}
exports.applyPatchesForApp = applyPatchesForApp;
function applyPatch(_a) {
    var patchFilePath = _a.patchFilePath, reverse = _a.reverse, packageDetails = _a.packageDetails, patchDir = _a.patchDir;
    var patch = read_1.readPatch({ patchFilePath: patchFilePath, packageDetails: packageDetails, patchDir: patchDir });
    try {
        apply_1.executeEffects(reverse ? reverse_1.reversePatch(patch) : patch, { dryRun: false });
    }
    catch (e) {
        try {
            apply_1.executeEffects(reverse ? patch : reverse_1.reversePatch(patch), { dryRun: true });
        }
        catch (e) {
            return false;
        }
    }
    return true;
}
exports.applyPatch = applyPatch;
function printVersionMismatchWarning(_a) {
    var packageName = _a.packageName, actualVersion = _a.actualVersion, originalVersion = _a.originalVersion, pathSpecifier = _a.pathSpecifier, path = _a.path;
    console.warn("\n" + chalk_1.default.red("Warning:") + " patch-package detected a patch file version mismatch\n\n  Don't worry! This is probably fine. The patch was still applied\n  successfully. Here's the deets:\n\n  Patch file created for\n\n    " + packageName + "@" + chalk_1.default.bold(originalVersion) + "\n\n  applied to\n\n    " + packageName + "@" + chalk_1.default.bold(actualVersion) + "\n  \n  At path\n  \n    " + path + "\n\n  This warning is just to give you a heads-up. There is a small chance of\n  breakage even though the patch was applied successfully. Make sure the package\n  still behaves like you expect (you wrote tests, right?) and then run\n\n    " + chalk_1.default.bold("patch-package " + pathSpecifier) + "\n\n  to update the version in the patch file name and make this warning go away.\n");
}
function printBrokenPatchFileError(_a) {
    var packageName = _a.packageName, patchFileName = _a.patchFileName, path = _a.path, pathSpecifier = _a.pathSpecifier;
    console.error("\n" + chalk_1.default.red.bold("**ERROR**") + " " + chalk_1.default.red("Failed to apply patch for package " + chalk_1.default.bold(packageName) + " at path") + "\n  \n    " + path + "\n\n  This error was caused because patch-package cannot apply the following patch file:\n\n    patches/" + patchFileName + "\n\n  Try removing node_modules and trying again. If that doesn't work, maybe there was\n  an accidental change made to the patch file? Try recreating it by manually\n  editing the appropriate files and running:\n  \n    patch-package " + pathSpecifier + "\n  \n  If that doesn't work, then it's a bug in patch-package, so please submit a bug\n  report. Thanks!\n\n    https://github.com/ds300/patch-package/issues\n    \n");
}
function printPatchApplictionFailureError(_a) {
    var packageName = _a.packageName, actualVersion = _a.actualVersion, originalVersion = _a.originalVersion, patchFileName = _a.patchFileName, path = _a.path, pathSpecifier = _a.pathSpecifier;
    console.error("\n" + chalk_1.default.red.bold("**ERROR**") + " " + chalk_1.default.red("Failed to apply patch for package " + chalk_1.default.bold(packageName) + " at path") + "\n  \n    " + path + "\n\n  This error was caused because " + chalk_1.default.bold(packageName) + " has changed since you\n  made the patch file for it. This introduced conflicts with your patch,\n  just like a merge conflict in Git when separate incompatible changes are\n  made to the same piece of code.\n\n  Maybe this means your patch file is no longer necessary, in which case\n  hooray! Just delete it!\n\n  Otherwise, you need to generate a new patch file.\n\n  To generate a new one, just repeat the steps you made to generate the first\n  one.\n\n  i.e. manually make the appropriate file changes, then run \n\n    patch-package " + pathSpecifier + "\n\n  Info:\n    Patch file: patches/" + patchFileName + "\n    Patch was made for version: " + chalk_1.default.green.bold(originalVersion) + "\n    Installed version: " + chalk_1.default.red.bold(actualVersion) + "\n");
}
//# sourceMappingURL=data:application/json;base64,